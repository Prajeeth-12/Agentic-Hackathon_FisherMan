'use client';

import { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Brain, TrendingUp, MapPin, Fish, Clock, Award, Lightbulb, Target, AlertCircle, Sparkles } from 'lucide-react';
import { useSimpleFishingLogs } from '@/hooks/use-simple-fishing-logs';
import { useToast } from '@/hooks/use-toast';

export function AIFishingInsights() {
  const { entries, analytics } = useSimpleFishingLogs();
  const { toast } = useToast();
  const [insights, setInsights] = useState<string>('');
  const [isLoading, setIsLoading] = useState(false);
  const [hasAutoGenerated, setHasAutoGenerated] = useState(false);

  // Auto-generate insights when user has sufficient data
  useEffect(() => {
    if (entries.length >= 3 && !hasAutoGenerated && !insights) {
      generateInsights(true);
      setHasAutoGenerated(true);
    }
  }, [entries.length, hasAutoGenerated, insights]);

  const generateInsights = async (isAutomatic = false) => {
    console.log('Generate insights called with entries:', entries.length);
    
    if (entries.length === 0) {
      toast({
        variant: 'destructive',
        title: 'No Data Available',
        description: 'Please add some fishing trips in the Simple Log tab first.',
      });
      return;
    }

    setIsLoading(true);
    try {
      console.log('Converting entries to API format...');
      // Convert simple fishing entries to the format expected by the API
      const apiData = entries.map(entry => ({
        id: entry.id,
        userId: 'user',
        date: entry.date,
        location: {
          lat: 0, // We don't have coordinates in simple log
          lng: 0,
          name: entry.location
        },
        species: [entry.species],
        catch: {
          count: entry.quantity,
          totalWeight: entry.weight,
          averageSize: entry.weight / Math.max(entry.quantity, 1)
        },
        weatherConditions: {
          temperature: 25, // Default values since we don't collect weather in simple log
          windSpeed: 10,
          visibility: 8,
          waveHeight: 1
        },
        equipment: [], // Not collected in simple log
        duration: entry.duration,
        success: entry.success,
        notes: entry.notes,
        createdAt: entry.createdAt.toISOString(),
        updatedAt: entry.createdAt.toISOString()
      }));

      console.log('API data prepared:', apiData);
      console.log('Calling insights API...');
      
      const response = await fetch('/api/generate-insights', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ fishingData: apiData }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to generate insights');
      }

      const data = await response.json();
      console.log('Received insights:', data.insights);
      
      setInsights(data.insights);
      
      if (!isAutomatic) {
        toast({
          title: 'AI Insights Generated!',
          description: 'Personalized recommendations based on your fishing data.',
        });
      }
    } catch (error) {
      console.error('Error generating insights:', error);
      if (!isAutomatic) {
        toast({
          variant: 'destructive',
          title: 'Error',
          description: `Failed to generate AI insights: ${error instanceof Error ? error.message : 'Unknown error'}`,
        });
      }
    } finally {
      setIsLoading(false);
    }
  };

  if (entries.length === 0) {
    return (
      <Card>
        <CardContent className="text-center py-8">
          <Brain className="w-12 h-12 mx-auto text-gray-400 mb-4" />
          <h3 className="text-lg font-semibold mb-2">No Fishing Data Yet</h3>
          <p className="text-gray-500 mb-4">
            Start logging your fishing trips in the Simple Log tab to get personalized AI insights!
          </p>
          <div className="text-sm text-gray-400">
            AI will analyze your patterns and provide actionable recommendations.
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="space-y-6">
      {/* Quick Stats Overview */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card>
          <CardContent className="p-4 text-center">
            <Fish className="w-6 h-6 mx-auto text-blue-600 mb-2" />
            <div className="text-xl font-bold">{analytics.totalTrips}</div>
            <div className="text-xs text-gray-500">Total Trips</div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4 text-center">
            <Award className="w-6 h-6 mx-auto text-green-600 mb-2" />
            <div className="text-xl font-bold">{analytics.successRate.toFixed(1)}%</div>
            <div className="text-xs text-gray-500">Success Rate</div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4 text-center">
            <Target className="w-6 h-6 mx-auto text-orange-600 mb-2" />
            <div className="text-xl font-bold">{analytics.totalCatch}</div>
            <div className="text-xs text-gray-500">Fish Caught</div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4 text-center">
            <Clock className="w-6 h-6 mx-auto text-purple-600 mb-2" />
            <div className="text-xl font-bold">{analytics.averageDuration.toFixed(1)}h</div>
            <div className="text-xs text-gray-500">Avg Duration</div>
          </CardContent>
        </Card>
      </div>

      {/* AI Insights Generation */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Brain className="w-5 h-5 text-blue-600" />
            AI-Generated Fishing Insights
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <p className="text-gray-600">
                Get personalized recommendations based on your {analytics.totalTrips} fishing trips
              </p>
              <Button 
                onClick={() => generateInsights(false)}
                disabled={isLoading}
                className="bg-blue-600 hover:bg-blue-700"
              >
                {isLoading ? (
                  <>
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                    Analyzing...
                  </>
                ) : (
                  <>
                    <Brain className="w-4 h-4 mr-2" />
                    Generate Insights
                  </>
                )}
              </Button>
            </div>

            {insights && (
              <div className="mt-4 p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-800">
                <h4 className="font-medium text-blue-900 dark:text-blue-100 mb-2 flex items-center gap-2">
                  <Lightbulb className="w-4 h-4" />
                  AI Recommendations
                  {hasAutoGenerated && (
                    <Badge variant="secondary" className="ml-2 text-xs">
                      <Sparkles className="w-3 h-3 mr-1" />
                      Auto-generated
                    </Badge>
                  )}
                </h4>
                <div className="text-sm text-blue-800 dark:text-blue-200 whitespace-pre-wrap">
                  {insights}
                </div>
              </div>
            )}
          </div>
        </CardContent>
      </Card>

      {/* Quick Insights Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {/* Best Performing Patterns */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2 text-lg">
              <TrendingUp className="w-5 h-5 text-green-600" />
              Success Patterns
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              {analytics.topSpecies.length > 0 && (
                <div>
                  <div className="font-medium text-sm text-gray-700 mb-1">Most Successful Species</div>
                  <div className="flex items-center gap-2">
                    <Fish className="w-4 h-4 text-blue-600" />
                    <span className="font-medium">{analytics.topSpecies[0].species}</span>
                    <Badge variant="outline" className="text-xs">
                      {analytics.topSpecies[0].count} caught
                    </Badge>
                  </div>
                </div>
              )}
              
              {analytics.topLocations.length > 0 && (
                <div>
                  <div className="font-medium text-sm text-gray-700 mb-1">Favorite Location</div>
                  <div className="flex items-center gap-2">
                    <MapPin className="w-4 h-4 text-green-600" />
                    <span className="font-medium">{analytics.topLocations[0].location}</span>
                    <Badge variant="outline" className="text-xs">
                      {analytics.topLocations[0].visits} visits
                    </Badge>
                  </div>
                </div>
              )}

              {analytics.dayOfWeekStats.length > 0 && (
                <div>
                  <div className="font-medium text-sm text-gray-700 mb-1">Best Day</div>
                  <div className="flex items-center gap-2">
                    <Calendar className="w-4 h-4 text-purple-600" />
                    <span className="font-medium">{analytics.dayOfWeekStats[0].day}</span>
                    <Badge variant="outline" className="text-xs">
                      {analytics.dayOfWeekStats[0].successRate.toFixed(0)}% success
                    </Badge>
                  </div>
                </div>
              )}
            </div>
          </CardContent>
        </Card>

        {/* Improvement Areas */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2 text-lg">
              <AlertCircle className="w-5 h-5 text-orange-600" />
              Areas for Improvement
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              {analytics.successRate < 50 && (
                <div className="p-3 bg-orange-50 rounded-lg">
                  <div className="font-medium text-sm text-orange-800 mb-1">
                    Success Rate Below 50%
                  </div>
                  <div className="text-xs text-orange-700">
                    Consider trying different locations or times of day
                  </div>
                </div>
              )}
              
              {analytics.averageDuration < 2 && analytics.totalTrips > 3 && (
                <div className="p-3 bg-blue-50 rounded-lg">
                  <div className="font-medium text-sm text-blue-800 mb-1">
                    Short Trip Duration
                  </div>
                  <div className="text-xs text-blue-700">
                    Longer trips (3+ hours) often yield better results
                  </div>
                </div>
              )}
              
              {analytics.totalCatch === 0 && analytics.totalTrips > 0 && (
                <div className="p-3 bg-red-50 rounded-lg">
                  <div className="font-medium text-sm text-red-800 mb-1">
                    No Successful Catches
                  </div>
                  <div className="text-xs text-red-700">
                    Try different bait, times, or locations for better results
                  </div>
                </div>
              )}
              
              {analytics.topLocations.length === analytics.totalTrips && analytics.totalTrips > 1 && (
                <div className="p-3 bg-green-50 rounded-lg">
                  <div className="font-medium text-sm text-green-800 mb-1">
                    Explore New Locations
                  </div>
                  <div className="text-xs text-green-700">
                    You've been going to the same spot. Try new areas!
                  </div>
                </div>
              )}
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Monthly Progress */}
      {analytics.monthlyTrends.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <TrendingUp className="w-5 h-5" />
              Monthly Progress
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4">
              {analytics.monthlyTrends.map((month) => (
                <div key={month.month} className="text-center p-3 bg-gray-50 rounded-lg">
                  <div className="text-xs font-medium text-gray-600">{month.month}</div>
                  <div className="text-lg font-bold text-blue-600">{month.trips}</div>
                  <div className="text-xs text-gray-500">trips</div>
                  {month.trips > 0 && (
                    <div className="text-xs text-green-600 mt-1">
                      {month.successRate.toFixed(0)}% success
                    </div>
                  )}
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
}

// Fix the Calendar import
import { Calendar } from 'lucide-react';
